name: Deploy IAM Roles

on:
  push:
    paths:
      - 'IaC/IAM/**'
  workflow_dispatch:

jobs:
  terraform:
    name: 'Deploy IAM Resources'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      # Get changed files
      - name: Get Changed Files
        id: changed_files
        run: |
          delimiter="EOF"
          
          echo "crawler_changed<<$delimiter" >> $GITHUB_OUTPUT
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -c "IaC/IAM/Glue_Crawler_Role" || echo "0" >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT
          
          echo "lambda_changed<<$delimiter" >> $GITHUB_OUTPUT
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -c "IaC/IAM/Lambda_Role" || echo "0" >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT
          
          echo "stepfunction_changed<<$delimiter" >> $GITHUB_OUTPUT
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -c "IaC/IAM/Step_Function_Role" || echo "0" >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT

      # Check and import existing roles
      - name: Check and Import Roles
        id: check_roles
        run: |
          # Check and import Crawler Role
          if aws iam get-role --role-name AWSGlueServiceRole-DATA15Crawler >/dev/null 2>&1; then
            if [ "${{ steps.changed_files.outputs.crawler_changed }}" != "0" ]; then
              cd IaC/IAM/Glue_Crawler_Role
              terraform init
              terraform import aws_iam_role.glue_crawler_role AWSGlueServiceRole-DATA15Crawler
              echo "crawler_exists=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "crawler_exists=false" >> $GITHUB_OUTPUT
          fi

          # Check and import Lambda Role
          if aws iam get-role --role-name LambdaWebApiRole-DATA15 >/dev/null 2>&1; then
            if [ "${{ steps.changed_files.outputs.lambda_changed }}" != "0" ]; then
              cd IaC/IAM/Lambda_Role
              terraform init
              terraform import aws_iam_role.lambda_role LambdaWebApiRole-DATA15
              echo "lambda_exists=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "lambda_exists=false" >> $GITHUB_OUTPUT
          fi

          # Check and import StepFunction Role
          if aws iam get-role --role-name StepFunctionsLambdaRole-DATA15 >/dev/null 2>&1; then
            if [ "${{ steps.changed_files.outputs.stepfunction_changed }}" != "0" ]; then
              cd IaC/IAM/Step_Function_Role
              terraform init
              terraform import aws_iam_role.stepfunction_role StepFunctionsLambdaRole-DATA15
              echo "stepfunction_exists=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "stepfunction_exists=false" >> $GITHUB_OUTPUT
          fi

      # Deploy Crawler Role if changed
      - name: Deploy Crawler Role
        if: steps.changed_files.outputs.crawler_changed != '0'
        working-directory: IaC/IAM/Glue_Crawler_Role
        run: |
          terraform init
          terraform validate
          terraform plan -out=tfplan-iam-crawler-role
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            aws s3 cp tfplan-iam-crawler-role s3://data15group3-execution-plans-test/iam/tfplan-iam-crawler-role-${TIMESTAMP}
          fi
          terraform apply -auto-approve tfplan-iam-crawler-role

      # Deploy Lambda Role if changed
      - name: Deploy Lambda Role
        if: steps.changed_files.outputs.lambda_changed != '0'
        working-directory: IaC/IAM/Lambda_Role
        run: |
          terraform init
          terraform validate
          terraform plan -out=tfplan-iam-lambda-role
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            aws s3 cp tfplan-iam-lambda-role s3://data15group3-execution-plans-test/iam/tfplan-iam-lambda-role-${TIMESTAMP}
          fi
          terraform apply -auto-approve tfplan-iam-lambda-role

      # Deploy StepFunction Role if changed
      - name: Deploy StepFunction Role
        if: steps.changed_files.outputs.stepfunction_changed != '0'
        working-directory: IaC/IAM/Step_Function_Role
        run: |
          terraform init
          terraform validate
          terraform plan -out=tfplan-iam-stepfunction-role
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            aws s3 cp tfplan-iam-stepfunction-role s3://data15group3-execution-plans-test/iam/tfplan-iam-stepfunction-role-${TIMESTAMP}
          fi
          terraform apply -auto-approve tfplan-iam-stepfunction-role